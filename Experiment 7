#include <stdio.h>
struct Process {
    int pid;        
    int bt;      
    int priority;  
    int wt;        
    int tat;      
};
void sortProcesses(struct Process p[], int n) {
    struct Process temp;
    for (int i = 0; i < n-1; i++) {
        for (int j = i+1; j < n; j++) {
            if (p[i].priority > p[j].priority) {
                temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }
}
void calculateTimes(struct Process p[], int n) {
    p[0].wt = 0;  
    for (int i = 1; i < n; i++) {
        p[i].wt = p[i - 1].bt + p[i - 1].wt;
    }
    for (int i = 0; i < n; i++) {
        p[i].tat = p[i].bt + p[i].wt;
    }
}
void printGanttChart(struct Process p[], int n) {
    printf("\nGantt Chart:\n");
    printf("|");
    for (int i = 0; i < n; i++) {
        printf(" P%d |", p[i].pid);
    }
    printf("\n");
    printf("0");
    for (int i = 0; i < n; i++) {
        printf("    %d", p[i].tat);
    }
    printf("\n");
}
void calculateAverageTimes(struct Process p[], int n) {
    int total_wt = 0, total_tat = 0;
    for (int i = 0; i < n; i++) {
        total_wt += p[i].wt;
        total_tat += p[i].tat;
    }
    printf("\nAverage Waiting Time: %.2f", (float)total_wt / n);
    printf("\nAverage Turnaround Time: %.2f\n", (float)total_tat / n);
}
void printTable(struct Process p[], int n) {
    printf("\nProcess Table:\n");
    printf("---------------------------------------------------\n");
    printf("| PID | Burst Time | Priority | Waiting Time | Turnaround Time |\n");
    printf("---------------------------------------------------\n");
    for (int i = 0; i < n; i++) {
        printf("|  P%d |     %d     |     %d    |      %d      |        %d        |\n",
               p[i].pid, p[i].bt, p[i].priority, p[i].wt, p[i].tat);
    }
    printf("---------------------------------------------------\n");
}
int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct Process p[n];
    for (int i = 0; i < n; i++) {
        printf("\nEnter details for Process %d\n", i+1);
        p[i].pid = i+1;
        printf("Burst Time: ");
        scanf("%d", &p[i].bt);
        printf("Priority: ");
        scanf("%d", &p[i].priority);
    }
    sortProcesses(p, n);
    calculateTimes(p, n);
    printGanttChart(p, n);
    printTable(p, n);
    calculateAverageTimes(p, n);
    return 0;
}
